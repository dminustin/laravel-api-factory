<?php

namespace Dminustin\ApiFactory\Classes\Generators;

use Dminustin\ApiFactory\Classes\AbstractClasses\AbstractGenerator;

class PostmanCollectionGenerator extends AbstractGenerator
{
    protected string $name = 'Postman Generator';

    protected function run()
    {
        $result = [
            'info' => [
                '_postman_id' => date('Y-m-d H:i:s'),
                'name' => config('app.name') . 'Collection @ ' . date('Y-m-d H:i:s'),
                'description' => 'Generated by ' . $this->info->name,
                'schema' => 'https://schema.getpostman.com/json/collection/v2.1.0/collection.json',
                '_exporter_id' => $this->info->name . ' v. ' . $this->info->version
            ],
            'variable' => [
                [
                    'key' => 'access_token',
                    'value' => '',
                    'type' => 'string'
                ],
                [
                    'key' => 'url_prefix',
                    'value' => config('app.url') . $this->config->uriPrefix,
                    'type' => 'string'
                ]
            ],
            'auth' => [
                'type' => 'bearer',
                'bearer' => [
                    [
                        'key' => 'token',
                        'value' => '{{access_token}}',
                        'type' => 'string'
                    ]
                ]
            ],
        ];

        $points = [];
        foreach ($this->routes as $route) {
            if (!isset($points[$route->prefix])) {
                $points[$route->prefix] = [];
            }
            $query = [];
            foreach ($route->params as $paramName => $paramType) {
                $query[] = ['key'=>$paramName, 'description'=>$paramType];
            }
            $header = [];
            foreach ($route->headers as $headerName => $headerType) {
                $header[] = ['key'=>$headerName, 'description'=>$headerType];
            }
            $points[$route->prefix][] = [
                'name' => $route->path,
                'description' => $route->description,
                'request' => [
                    'method' => strtoupper($route->method),
                    'header' => $header,
                    'url' => [
                        'host' => ['{{url_prefix}}'],
                        'path' => [$route->path],
                        'query' => $query
                    ]
                ],

            ];
        }
        $items = [];
        $level = -1;
        foreach ($points as $folder => $row) {
            $items[++$level] = ['name' => $folder];
            $items[$level]['item'] = $row;
        }
        $result = array_merge($result, ['item' => $items]);

        $this->saveFile(
            base_path('public/docs/postman.json'),
            json_encode($result, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES),
            true
        );
    }
}
