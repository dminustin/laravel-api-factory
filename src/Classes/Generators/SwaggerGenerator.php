<?php

namespace Dminustin\ApiFactory\Classes\Generators;

use Dminustin\ApiFactory\Classes\AbstractClasses\AbstractGenerator;
use Dminustin\ApiFactory\Classes\DataConverters\SwaggerParamsConverter;
use Dminustin\ApiFactory\Classes\RouterConfig\EndPoint;

class SwaggerGenerator extends AbstractGenerator
{
    protected string $name = 'Swagger Generator';

    /**
     * @todo todo group routes by middlewares
     */
    protected function run()
    {
        $result = [
            'swagger' => '2.0',
            'info' => [
                'title' => config('app.title'),
                'version' => '1.0',
                'description' => 'Generated by ' . $this->info->name,
            ],
            'host' => last(explode('//', config('app.url'))),
            'basePath' => $this->config->uriPrefix,
            'schemes' => [
                'http', 'https'
            ],
            'consumes' => [
                'application/json'
            ],
            'produces' => [
                'application/json'
            ],
            'paths' => []
        ];
        /** @var EndPoint $route */
        foreach ($this->routes as $route) {
            $params = [];
            if (count($route->params)) {
                $params = (new SwaggerParamsConverter($route->params))
                    ->setIn('query')
                    ->convert();
            }
            if (count($route->headers)) {
                $params = array_merge(
                    $params,
                    (new SwaggerParamsConverter($route->headers))
                        ->setIn('headers')
                        ->convert()
                );
            }
            $result['paths']['/' . $route->path][$route->method] =
                [
                    'description' => $route->description,
                    'produces' => $route->produces,
                    'responses' => $route->responses,
                    'parameters' => $params,
                    'tags' => $route->tags,
                ];
        }
        $result['definitions'] = $this->config->definitions;
        $result['componentss'] = $this->config->components;

        $outFileName = base_path('public/docs/api-docs.json');
        $this->saveFile($outFileName, json_encode(
            $result,
            JSON_PRETTY_PRINT |
            JSON_UNESCAPED_SLASHES |
            JSON_UNESCAPED_UNICODE
        ), true);
    }
}
